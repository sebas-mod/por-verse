import os from "os"
import fs from "fs"

const defaultMenu = {
  before: `
*‚ï≠‚îÄ‚îà„Éª‡≠® ‚ò†Ô∏è ‡≠ß„Éª‚îà„Éª‚îà‚îÄ‚ïÆ*
> *Àö‚Çä‚Äß ùë∞ùëµùë≠ùë∂ ùë´ùë¨ùë≥ ùëºùë∫ùëºùë®ùëπùë∞ùë∂ ‚Äß‚ÇäÀö*
> 
>  ‚ñ∏ üë§ *Nombre* : %name
>  ‚ñ∏ ‚úÖÔ∏è *Estado* : %status
*‚ï∞‚îÄ‚îà„Éª‚îà„Éª‚îà„Éª‚îà„Éª‚îà‚îÄ‚ïØ*

*‚ï≠‚îÄ‚îà„Éª‡≠® ‚ò†Ô∏è ‡≠ß„Éª‚îà„Éª‚îà‚îÄ‚ïÆ*
> *Àö‚Çä‚Äß ùë≥ùë∞ùë∫ùëªùë® ùë´ùë¨ ùë™ùë∂ùë¥ùë®ùëµùë´ùë∂ùë∫ ‚Äß‚ÇäÀö*
>
> ‚ñ∏ *üÖü = Premium*
> ‚ñ∏ *üÖê = Admin*
> ‚ñ∏ *üÖì = Desarrollador*
> ‚ñ∏ *üÖû = Due√±o*
*‚ï∞‚îÄ‚îà„Éª‚îà„Éª‚îà„Éª‚îà„Éª‚îà‚îÄ‚ïØ*
`.trimStart(),
  header: `
> ‚îå‚îÄ‚îÄ„Äå *%category* „Äç`,
  body: `> ‚îÇ‚ñ∏ %cmd %isPremium %isAdmin %isMods %isOwner`,
  footer: `> ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄÔΩ•ÔΩ°Ôæü`,
  after: `
>
*‚éØ‚éØ„Ö§„Ö§÷¥„Ö§„Ö§‡≠®   üòé  ‡≠ß„Ö§„Ö§÷¥   „Ö§‚éØ‚éØ*
> ùô±ùö¢ ùöúùöéùöãùöäùöú _ ùôºùô≥ ùü∏ùü∂ùü∏ùüª
*‚éØ‚éØ„Ö§„Ö§÷¥„Ö§„Ö§‡≠®   üòé  ‡≠ß„Ö§„Ö§÷¥   „Ö§‚éØ‚éØ*
`
}

let handler = async (m, { conn, usedPrefix, isOwner, isMods, isPrems }) => {
  try {
    let name = conn.getName(m.sender)
    let status = isMods
      ? "üë§ Desarrollador"
      : isOwner
        ? "üëë Due√±o"
        : isPrems
          ? "‚≠ê Usuario Premium"
          : "üßÉ Usuario Gratis"

    // INFO DEL BOT
    const packageJson = JSON.parse(fs.readFileSync("./package.json", "utf-8"))
    const Version = packageJson.version
    const mode = global.opts.self ? "Privado" : "P√∫blico"
    const uptime = formatUptime(process.uptime())
    const muptime = formatUptime(os.uptime())
    const totalf = Object.values(global.plugins)
      .filter(v => Array.isArray(v.help))
      .reduce((a, v) => a + v.help.length, 0)

    const listCmd = `
*‚ï≠‚îÄ‚îà„Éª‚îà„Éª‡≠® ‚ò†Ô∏è ‡≠ß„Éª‚îà„Éª‚îà‚îÄ‚ïÆ*
> *Àö‚Çä‚Äß ùë∞ùëµùë≠ùë∂ ùë´ùë¨ùë≥ ùë©ùë∂ùëª ‚Äß‚ÇäÀö*
> 
> ‚ñ∏ üë§ *Nombre:* ${conn.user.name}
> ‚ñ∏ üì≤ *Versi√≥n:* ${Version}
> ‚ñ∏ ‚ò†Ô∏è *Modo:* ${mode}
> ‚ñ∏ üïí *Activo:* ${uptime}
> ‚ñ∏ üåê *Uptime SV:* ${muptime}
> ‚ñ∏ üíæ *Total Comandos:* ${totalf}
*‚ï∞‚îÄ‚îà„Éª‚îà„Éª‚îà„Éª‚îà„Éª‚îà„Éª‚îà‚îÄ‚ïØ*
`.trimStart()

    // CATEGOR√çAS
    const tags = {
      ai: "ü§ñ Men√∫ de IA",
      downloader: "üì≤ Descargas",
      group: "üë• Grupos",
      info: "üìñ Informaci√≥n",
      internet: "üåê Internet",
      rpg: "‚öîÔ∏è RPG",
      maker: "üé® Creadores",
      owner: "üòé Due√±o",
      tools: "üß∞ Herramientas"
    }

    let help = Object.values(global.plugins)
      .filter(plugin => !plugin.disabled)
      .map(plugin => ({
        help: Array.isArray(plugin.help) ? plugin.help : [plugin.help],
        tags: Array.isArray(plugin.tags) ? plugin.tags : [plugin.tags],
        prefix: "customPrefix" in plugin,
        premium: plugin.premium,
        mods: plugin.mods,
        owner: plugin.owner,
        admin: plugin.admin
      }))

    let groups = {}
    for (let tag in tags) {
      groups[tag] = []
      for (let plugin of help)
        if (plugin.tags && plugin.tags.includes(tag))
          if (plugin.help) groups[tag].push(plugin)
    }

    // PLANTILLAS
    let before = defaultMenu.before
    let header = defaultMenu.header
    let body = defaultMenu.body
    let footer = defaultMenu.footer
    let after = defaultMenu.after

    // UNIFICAR TODO EN TEXTO
    let _text = [
      before,
      listCmd,
      ...Object.keys(tags).map(tag => {
        return (
          header.replace(/%category/g, tags[tag]) +
          "\n" +
          [
            ...help
              .filter(menu => menu.tags && menu.tags.includes(tag) && menu.help)
              .map(menu =>
                menu.help
                  .map(help => {
                    return body
                      .replace(/%cmd/g, menu.prefix ? help : usedPrefix + help)
                      .replace(/%isPremium/g, menu.premium ? "üÖü" : "")
                      .replace(/%isAdmin/g, menu.admin ? "üÖê" : "")
                      .replace(/%isMods/g, menu.mods ? "üÖì" : "")
                      .replace(/%isOwner/g, menu.owner ? "üÖû" : "")
                      .trim()
                  })
                  .join("\n")
              ),
            footer
          ].join("\n")
        )
      }),
      after
    ].join("\n")

    const replace = {
      "%": "%",
      name,
      status
    }

    let text = _text.replace(
      new RegExp(`%(${Object.keys(replace).join("|")})`, "g"),
      (_, name) => replace[name]
    )

    // URL DE IMAGEN DE ALYA
    const alyaImage = "https://h.uguu.se/LFvfEabJ.jpg" // üå∏ Puedes cambiarla si quer√©s

    // Enviar men√∫ con imagen
    await conn.sendMessage(m.chat, {
      image: { url: alyaImage },
      caption: text.trim(),
      contextInfo: {
        externalAdReply: {
          title: "üå∏ Alya te da la bienvenida",
          body: wish(),
          thumbnailUrl: alyaImage,
          sourceUrl: global.config.website,
          mediaType: 1,
          renderLargerThumbnail: true
        }
      }
    })
  } catch (err) {
    console.error(err)
    m.reply("‚ö†Ô∏è Error al mostrar el men√∫2.")
  }
}

handler.help = ["menu2"]
handler.command = /^menu2$/i
export default handler

// Funciones auxiliares
function formatUptime(seconds) {
  let minutes = Math.floor(seconds / 60)
  let hours = Math.floor(minutes / 60)
  minutes %= 60
  return `${hours}h ${minutes}m`
}

function wish() {
  const hour = new Date().getHours()
  if (hour < 6) return "üåô Dulces sue√±os~"
  if (hour < 12) return "üåÖ Buenos d√≠as~"
  if (hour < 18) return "üåá Buenas tardes~"
  return "üåÉ Buenas noches~"
}
